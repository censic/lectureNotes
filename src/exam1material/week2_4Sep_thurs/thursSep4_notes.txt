HW 1 repository issues


HW 2 due Tuesday, September 9

--> will be creating 2 image files

--> make sure those are added to your git repository!

////////////////////////////

Today:
- one more parse tree / circuit
- begin propositional logic
- equivalent statements
- satisfiability

////////////////////////////////////////

Example: another parse tree

p ∧ q ∧ r → ¬p ∨ q → r

Top-level operator: leftmost →



Example: another circuit

p OR q AND NOT p


//////////////////////////////////////////
∧ ∨ ¬ → 
//////////////////////////////////////////

Propositional logic.


- a set of *propositional atoms* (statements that can be T/F)
    --> these will be our boolean variables in logic statements
    --> minimal (don't contain any logical operators)



- connected by logical operators



- join together to make new *propositions* (logical sentences)
    that can be true or false



////////////////////////////////////////

Example: 

z != 7 && str.contains(sub)


--> what are the propositional atoms?

p: z == 7
q: str.contains(sub)

--> express in propositional logic

¬p ∧ q


////////////////////////////////////////

Example:

You can't enroll for the course if you haven't taken 
the prerequisite.


--> what are the propositional atoms?

p: You can enroll for the course
q: You have taken the prerequisite

--> translate to propositional logic:

really saying:

¬q → ¬p

If you haven't taken the prerequisite, then you can't enroll for the course



What is the *contrapositive* of our statement?

p → q

If you have enrolled in the course, you have taken the prerequisite



//////////////////////////////////////////
∧ ∨ ¬ → 
//////////////////////////////////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

Propositional atoms?

p: x <= 2
q: y >= 0
r: z == 17
s: answer = 25

Translation? (if ... then ...)

if (both conditions were true) then answer would be 25

(p V q) ∧ ¬r → s


//////////////////////////////////

Consider these two statements:

p: I am at least 16 years old
q: I can drive a car


1) If I am at least 16 years old, then I can drive a car.

p → q

2) I'm not at least 16 years old or I can drive a car.

¬p V q

--> are they saying the same thing?

Yes, because they are both false in the same siutation (I'm at least 16 and I can't drive a car)


--> could we PROVE it? (equiv1.logika, equiv2.logika)

For every possible truth assignment, the two statements
have the same output. <== NEED TO EXPLAIN THIS IN THIS WAY FOR THE EXAM TO AVOID DOCKING POINTS




//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...
    these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION (Negation = opposite / reverse)
(i.e., what condition would be true for the "else")?

if (a != r || a != 5)




///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?





//////////////////////////////

DeMorgan's laws in propositional logic:

¬(p ∨ q) is equivalent to... ¬p ∧ ¬q 

¬(p ∧ q) is equivalent to... ¬p V ¬q


--> how can we prove the first of DeMorgan's laws?

For every possible truth assignment, the two statements
had the same output.



////////////////////////

Another if-statement example.


if (Character.isDigit(letter) || num < 10) {
    statements
}

--> how would we negate it without using a ! operator?
    also no extra ()

if (Character.isDigit(letter) == false || num >= 10) {
    statements
}

///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negate it:

if (!((y >= 4 && num != 14) || x > 0)) {
    statements
}

if (!(y >= 4 && num != 14) && x <= 0) {
    statements
}

if ((y < 4 || num == 14) && x <= 0)


///////////////////////

in-class quiz

///////////////////////

Summary of important equivalences (≡ means "is equivalent to").


¬(p ∧ q) ≡ ¬p ∨ ¬q                  (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q

p → q ≡  ¬q → ¬p                    (contrapositive)
p → q ≡  ¬p ∨ q                     (can turn implies into an or)


associative laws

    (2 + 3) + 5 = 2 + (3 + 5)

    (p ∧ q) ∧ r     vs      p ∧ (q ∧ r) 


    (p → q) → r     vs      p → (q → r)

    how to show logically equivalent? 

    Implies is NOT associative

    how to show NOT equivalent? find one truth assignment where the two truth statements have different output

    (p → q) → r is false
    p → (q → r) is true

    p = F
    q = T
    r = F

    They are not equivalent because the two statements have different outputs on the above truth assignment.


commutative laws 

p ∧ q vs q ∧ p

p → q vs q → p

p = T, q = F makes the first statement (of the implies operator) false but the second statement true, so implies is NOT communiative.


--> you may still be asked to demonstrate these with
    truth tables or prove them with natural deduction (coming soon)


//////////////////////////

Summary of equivalence.

How do we prove two statements ARE equivalent?

two truth tables
want to show for every truth assignemnt that they have the same output

How do we prove two statements are NOT equivalent?
find one truth assignment that 
is a couterexample
the truth assignment makes one statement output true
and the other output false




//////////////////////////

What is equivalent to:

¬p → q

Below is the same as the above equiation:
Contrapositive (equivalent to the above): ¬q → p
q V p


//////////////////////////

Satisfiability.

- definition: a logical statement is satisfiable if I can find a truth
assignment where the statement outputs true


- what kind of statement is satisfiable? what kind is not?

Satisfiable: Tautology and Contingent
Unsatisfiable: Contradictory


- is this satisfiable?

    (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)

    YES

All you need to do is find ONE truth assignment to determine if its satisfiable




to show a statement is satisifiable: Only need one truth assignment

to show a statement is NOT satisfiable: Need the full truth table, classified as Contradictory (outputs false for every truth assignment)


////////////////////////////

SAT

straightforward approach to checking all possibilities:




- Aside: P and NP problems

running time programs

can we solve a problem in polynomial time?

can we check a solution to a problem in polynomial time?



////////////////////////

Next time:
- how to prove an argument

