Homework 1 due tonight
    last problem (Deer/Fox/Bunny) suggestions

    What are the possible cases?


I'll post Homework 2 after class (due Tues Sep 9)

/////////////////////

Today:

- review implies operator
- evaluating logical statements
- compound truth tables
- using Logika
- parse trees
- begin propositional logic

//////////////////////////////////////////


Review: IMPLIES operator →

"If it is snowing, then I will bring a coat"

p: It is snowing
q: I will bring a coat

p → q

When is this true? When is this false? 

NOTE: Things are only false when the promise is broken


p q  #  p → q
--------------
T T  #    T
T F  #    F
F T  #    T (proimse came up but didn't have a chacne to break it)
F F  #    T

//////////////////////////////////////

Evaluating logical statements.

Basic operations:

∧ - AND
∨ - OR
¬ - NOT
→ - IMPLIES

////////////////////////////////////////

Consider ¬p ∨ q ∧ r.

--> what operation do we do first?



Order of operations

In math? 

1. ()
2. Exponents
3. *, / (left to right)
4. +, - (left to right)


For logic statements (∧ ∨ ¬ →)?

()
¬ (negation)
∧ (AND)
∨ (OR)
→ (IMPLIES)



Given this statement:

    ¬p ∨ q ∧ r




Add () to show the order of operations.

    ((¬p) ∨ (q ∧ r))




Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F





////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to....(¬(¬p)) [True]


    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to....(p ∧ q) ∧ r [False]
        p ∨ q ∨ r is equivalent to....(p ∨ q) ∨ r [True]


    → evaluates right to left
        p → q → r is equivalent to....p → (q → r) [True]





//////////////////////////////////////////

Top-level operator (what happens LAST?)


¬p ∨ q ∧ r | ANSWER: (¬p) ∨ (q ∧ r)


top-level? OR


How is this similar to a circuit? The last gate

Top-level operator is the output of the entire statement


///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with ():

(p ∧ q) ∨ (r ∧ p)


top-level operator? OR



//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with ():

((p ∧ q) ∧ r) ∧ s


top-level operator? AND  (rightmost one, by the "s")


////////////////////////////////////////////////////

In-class practice quiz

////////////////////////////////////////////////////

Listing all truth assignments for a logical statement.



If we have 2 variables, how many possible truth assignments?

    p, q


4



If we have 3 variables, how many possible truth assignments?

    p, q, r

8


If we have n variables, how many possible truth assignments?

2^n




////////////////////////////////////////////////////

Classifying logical statements based on truth assignments.



Contingent, contradictory, tautology



contingent: At least one truth assignment evaluates to true and a least one truth assignment evalues to true (a mix)

    Example? p ∨ q



contradictory: Every truth assignemnt evaluates to false (always false)

    Example? ¬p ∧ p (impossible to satisfy)


tautology: Every truth assignment evaluates to true (always true)


    Example? ¬p ∨ p (This is always true irrelevant of what the assignment is)
    

///////////////////////////////////////////

∧ ∨ ¬ →

///////////////////////////////////////////

Compound truth tables.


Write a truth table for:

(p ∧ r) → (r ∨ ¬q)

Top-level operator: →
-----------------------------
p q r  #  (p ∧ r) → (r ∨ ¬q)
-----------------------------
T T T #    T             T  F   =  T
T T F #    F             F  F   =  T
T F T #    T             T  T   =  T
T F F #    F             T  T   =  T
F T T #    F             T  F   =  T
F T F #    F             F  F   =  T
F F T #    F             T  T   =  T
F F F #    F             T  T   =  T
-----------------------------

What kind of statement is this? Tautology



--> top-level operator?

--> need to evaluate statement on ALL possible truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table?


/////////////////////////////////////////

complete truth table in truth.logika

--> what to type for different operators


AND: &
OR: |
NOT: !
IMPLIES: ->:

alignment matters!

--> order of operations in Logika

//////////////////////////////////////
Complete tautology.logika

//////////////////////////////////////

trees



parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r

       → 
       T
    /     \
   ∧       ¬
   F       T
  / \      |
 p   q     r
 T   F     F



--> expression trees



--> draw one for p ∨ q ∧ r → ¬p → ¬q ∨ s
                    → 
                 /     \
                ∨       →
               / \     / \
              p   ∧   ¬   ∨
                 / \  |  / \
                q   r p ¬   s
                        |
                        q
                        


--> how do they relate to programming?

--> what is the "top-level operator" here?


////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions? (true or false)
propositional atom: as simple of a proposition as possible
    (doesn't contain operators)

Today is Thursday.


What time is it?


x == 2


Pigs can fly.


Drive carefully.


y <= 4



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p: It's not below freezing.


    p ∧ q: It's below freezing and it is snowing


    p → q : If it's below freezing, then it is snowing


    ¬p → ¬q: If it's not below freezing, then it's not snowing


    r ∨ s: (y <= 4 || x == 2)

    ¬r: y > 4

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability